eBayes() %>%
tidy() %>%
mutate(fdr = p.adjust(p.value, method = "fdr")) %>%
arrange(p.value)
head(limma_fit)
limma_fit %>% filter(fdr <= 0.05, abs(estimate) > log2(1.3))
limma_fit
hist(limma_fit$fdr)
mean(limma_fit$fdr)
sensitive <- c(0, 0, 0, 1 , 1, 1) # assign control and trt groups
design.mat <- model.matrix(~sensitive)
design.mat
limma_fit <- lmFit(expr.rma[ ,7:12], design.mat) %>%
eBayes() %>%
tidy() %>%
mutate(fdr = p.adjust(p.value, method = "fdr")) %>%
arrange(p.value)
head(limma_fit)
limma_fit %>% filter(fdr <= 0.05, abs(estimate) > log2(1.3))
limma_fit
mean(limma_fit$fdr)
hist(limma_fit$fdr)
min(limma_fit$fdr)
sensitive <- c(1, 0, 1, 0 , 1, 0) # assign control and trt groups
design.mat <- model.matrix(~sensitive)
design.mat
limma_fit <- lmFit(expr.rma[ ,7:12], design.mat) %>%
eBayes() %>%
tidy() %>%
mutate(fdr = p.adjust(p.value, method = "fdr")) %>%
arrange(p.value)
head(limma_fit)
limma_fit %>% filter(fdr <= 0.05, abs(estimate) > log2(1.3))
limma_fit
min(limma_fit$fdr)
log2(1.3)
sensitive <- c(0, 2, 0, 2 , 0, 2) # assign control and trt groups
design.mat <- model.matrix(~sensitive)
design.mat
limma_fit <- lmFit(expr.rma[ ,7:12], design.mat) %>%
eBayes() %>%
tidy() %>%
mutate(fdr = p.adjust(p.value, method = "fdr")) %>%
arrange(p.value)
limma_fit
hist(limma_fit$fdr)
mean(limma_fit$fdr)
limma_fit <- lmFit(expr.rma[ ,7:12], design.mat) %>%
eBayes() %>%
tidy() %>%
mutate(p.adjust(p.value, method = "fdr")) %>%
arrange(p.value)
limma_fit
head(expr.rma[ , 7:12])
head(expr.rma[ , 7:11])
head(expr.rma[ , 7:9])
head(expr.rma)
sensitive <- c(0, 2, 0, 2 , 0, 2) # assign control and trt groups
design.mat <- model.matrix(~sensitive)
design.mat
fit_limma <- function (expr.rma, design.mat){
limma_fit <- lmFit(expr.rma, design.mat) %>%
eBayes() %>%
tidy() %>%
mutate(fdr = p.adjust(p.value, method = "fdr")) %>%
arrange(p.value)
return(limma_fit)
}
limma_fit <- fit_limma(expr.rma[ , 7:12], design.mat)
head(limma_fit)
sensitive <- c(0, 2, 0, 2 , 0, 2) # assign control and trt groups
design.mat <- model.matrix(formula(~sensitive))
design.mat
fit_limma <- function (expr.rma, design.mat){
limma_fit <- lmFit(expr.rma, design.mat) %>%
eBayes() %>%
tidy() %>%
mutate(fdr = p.adjust(p.value, method = "fdr")) %>%
arrange(p.value)
return(limma_fit)
}
limma_fit <- fit_limma(expr.rma[ , 7:12], design.mat)
head(limma_fit)
sensitive <- c(0, 1, 0, 1 , 0, 1) # assign control and trt groups
design.mat <- model.matrix(formula(~sensitive))
limma_fit <- lmFit(expr.rma[7:12], design.mat)
temp <- eBayes(limma_fit)
temp$p.value
limma_fit
View(limma_fit)
View(limma_fit)
temp2 <- tidy(temp)
limma_fit <- eBayes(lmFit(expr.rma[7:12], design.mat))
limma_fit
limma_fit <- tidy(eBayes(lmFit(expr.rma[7:12], design.mat)))
mutate(eBayes(lmFit(expr.rma[7:12], design.mat)), fdr = p.adjust(p.value, method = "fdr"))
temp <- eBayes(lmFit(expr.rma[7:12], design.mat))
mutate(temp, fdr = temp$p.adjust(p.value, method = "fdr"))
mutate(temp, fdr = p.adjust(temp$p.value, method = "fdr"))
temp$p.value
design.mat
limma_fit <- lmFit(expr.rma[ , 7:12], design.mat) %>%
eBayes() %>%
tidy() %>%
mutate(fdr = p.adjust(p.value, method = "fdr")) %>%
arrange(p.value)
limma_fit
limma_fit <- lmFit(expr.rma[ , 7:12], design.mat)
limma_fit <- eBayes(limma_fit)
limma_fit <- tidy(limma_fit)
limma_fit$p.value
hist(limma_fit$p.value)
mean(limma_fit$p.value, 10)
min(limma_fit$p.value, 10)
min(limma_fit$p.value)
p.adjust(limma_fit$p.value, method = "fdr")
hist(p.adjust(limma_fit$p.value, method = "fdr"))
min(p.adjust(limma_fit$p.value, method = "fdr"))
max(limma_fit$p.value)
p.adjust(limma_fit$p.value)
density(p.adjust(limma_fit$p.value))
hist(density(p.adjust(limma_fit$p.value)))
plot(density(p.adjust(limma_fit$p.value)))
max(p.adjust(limma_fit$p.value))
min(p.adjust(limma_fit$p.value))
head(expr.rma)
sensitive <- c(0, 1, 0, 1 , 0, 1) # assign control and trt groups
design.mat <- model.matrix(formula(~sensitive))
design.mat
fit_limma <- function (expr.rma, design.mat){
limma_fit <- lmFit(expr.rma, design.mat) %>%
eBayes() %>%
tidy() %>%
mutate(fdr = p.adjust(p.value, method = "fdr")) %>%
arrange(p.value)
return(limma_fit)
}
limma_fit <- fit_limma(expr.rma[ , 7:12], design.mat)
head(limma_fit)
limma_fit %>% filter( abs(estimate) > log2(1.3))
limma_fit
filter(limma_fit, fdr <= 0.05, abs(estimate) > log2(1.3))
filter(limma_fit, abs(estimate) > log2(1.3))
#=========================================================#
sensitive <- c(0, 1, 0, 1 , 0, 1) # assign control and trt groups
design.mat.ABL <- model.matrix(formula(~sensitive))
limma_fit.ABL <- fit_limma(expr.rma[ , 1:6], design.mat.ABL)
limma_fit.ABL <- fit_limma(expr.rma[ , 1:6], design.mat.ABL)
limma_fit.ABL %>% filter(fdr <= 0.05, abs(estimate) > log2(1.3))
limma_fit.ABL
#=========================================================#
Annot <- data.frame(
PROBEID = keys(hgu133plus2),
REFSEQ = sapply(contents(hgu133plus2REFSEQ), paste, collapse=", "),
SYMBOL = sapply(contents(hgu133plus2SYMBOL), paste, collapse=", "),
DESC = sapply(contents(hgu133plus2GENENAME), paste, collapse=", "),
stringsAsFactors = FALSE)
library(jqr)
#=========================================================#
install.packages("jqr")
#=========================================================#
# install.packages("jqr")
library(jqr)
Annot <- data.frame(
PROBEID = keys(hgu133plus2),
REFSEQ = sapply(contents(hgu133plus2REFSEQ), paste, collapse=", "),
SYMBOL = sapply(contents(hgu133plus2SYMBOL), paste, collapse=", "),
DESC = sapply(contents(hgu133plus2GENENAME), paste, collapse=", "),
stringsAsFactors = FALSE)
Annot <- data.frame(
PROBEID = keys(hgu133plus2),
REFSEQ = sapply(contents(hgu133plus2REFSEQ), paste, collapse=", "),
SYMBOL = sapply(contents(hgu133plus2SYMBOL), paste, collapse=", "),
DESC = sapply(contents(hgu133plus2GENENAME), paste, collapse=", "),
stringsAsFactors = FALSE)
inner_join(limma_fit.LNCaP, Annot, by = c("gene" = "PROBEID"))
sensitive <- c(0, 1, 0, 1 , 0, 1) # assign control and trt groups
design.mat.LNCaP <- model.matrix(formula(~sensitive))
limma_fit.LNCaP <- fit_limma(expr.rma[ , 7:12], design.mat.LNCaP)
limma_fit.LNCaP <- fit_limma(expr.rma[ , 7:12], design.mat.LNCaP)
head(limma_fit.LNCaP)
limma_fit.LNCaP %>% filter(fdr <= 0.05, abs(estimate) > log2(1.3))
inner_join(limma_fit.LNCaP, Annot, by = c("gene" = "PROBEID"))
library(hgu133plus2.db)
colnames(limma_fit.LNCaP)
#=========================================================#
# install.packages("jqr")
library(jqr)
Annot <- data.frame(
PROBEID = keys(hgu133plus2),
# REFSEQ = sapply(contents(hgu133plus2REFSEQ), paste, collapse=", "),
# SYMBOL = sapply(contents(hgu133plus2SYMBOL), paste, collapse=", "),
# DESC = sapply(contents(hgu133plus2GENENAME), paste, collapse=", "),
stringsAsFactors = FALSE)
# these packages are needed for HW2
# affy and affyPLM are needed to read the microarray data and run RMA
library(affy)
library(affyPLM)
library(hgu133plus2.db) # for annotation
library(limma) # for linear modeling
library(sva) # for batch effect correction. Contains ComBat and sva.
library(ggplot2) # for plotting
library(dplyr) # for data manipulation
library(reticulate) # needed to run python in Rstudio
# these next two are not essential to this course
library(mvtnorm) # need this to simulate data from multivariate normal
library(HistData) # need this for data
Annot <- data.frame(
PROBEID = keys(hgu133plus2),
# REFSEQ = sapply(contents(hgu133plus2REFSEQ), paste, collapse=", "),
# SYMBOL = sapply(contents(hgu133plus2SYMBOL), paste, collapse=", "),
# DESC = sapply(contents(hgu133plus2GENENAME), paste, collapse=", "),
stringsAsFactors = FALSE)
#=========================================================#
fit_limma. <- function (expr.rma, design.mat){
limma_fit <- lmFit(expr.rma, design.mat) %>%
eBayes() %>%
tidy() %>%
mutate(fdr = p.adjust(p.value, method = "BH")) %>%
arrange(p.value)
return(limma_fit)
}
limma_fit.LNCaP <- fit_limma(expr.rma[ , 7:12], design.mat.LNCaP)
head(limma_fit.LNCaP)
head(limma_fit.LNCaP)
sensitive <- c(0, 1, 0, 1 , 0, 1) # assign control and trt groups
design.mat.LNCaP <- model.matrix(formula(~sensitive))
design.mat.LNCaP
limma_fit.LNCaP <- fit_limma(expr.rma[ , 7:12], design.mat.LNCaP)
head(limma_fit.LNCaP)
limma_fit.LNCaP %>% filter(fdr <= 0.05, abs(estimate) > log2(1.3))
limma_fit.LNCaP
library(affy)
library(limma)
library(hgu133plus2.db)
library(hgu133plus2.db)
library(sva)
library(ggplot2)
library(dplyr)
library(biobroom)
library(dplyr)
library(biobroom)
library(class)
library(class)
library(e1071)
celFiles <- list.celfiles(path = "data", full.names=TRUE)
data.affy <- ReadAffy(filenames = celFiles)
data.rma <- rma(data.affy)
expr.rma <- exprs(data.rma)
#=========================================================#
fit_limma. <- function (expr.rma, design.mat){
limma_fit <- lmFit(expr.rma, design.mat) %>%
eBayes() %>%
tidy() %>%
mutate(fdr = p.adjust(p.value, method = "fdr")) %>%
arrange(p.value)
return(limma_fit)
}
#=========================================================#
# install.packages("jqr")
# library(jqr)
Annot <- data.frame(
PROBEID = keys(hgu133plus2),
# REFSEQ = sapply(contents(hgu133plus2REFSEQ), paste, collapse=", "),
# SYMBOL = sapply(contents(hgu133plus2SYMBOL), paste, collapse=", "),
# DESC = sapply(contents(hgu133plus2GENENAME), paste, collapse=", "),
stringsAsFactors = FALSE)
#=========================================================#
head(expr.rma)
sensitive <- c(0, 1, 0, 1 , 0, 1) # assign control and trt groups
design.mat.LNCaP <- model.matrix(formula(~sensitive))
design.mat.LNCaP
limma_fit.LNCaP <- fit_limma(expr.rma[ , 7:12], design.mat.LNCaP)
#=========================================================#
fit_limma <- function (expr.rma, design.mat){
limma_fit <- lmFit(expr.rma, design.mat) %>%
eBayes() %>%
tidy() %>%
mutate(fdr = p.adjust(p.value, method = "fdr")) %>%
arrange(p.value)
return(limma_fit)
}
limma_fit.LNCaP <- fit_limma(expr.rma[ , 7:12], design.mat.LNCaP)
head(limma_fit.LNCaP)
head(limma_fit.LNCaP)
design.mat.LNCaP <- model.matrix(formula(~sensitive))
design.mat.LNCaP
limma_fit.LNCaP <- fit_limma(expr.rma[ , 7:12], design.mat.LNCaP)
head(limma_fit.LNCaP)
limma_fit.LNCaP
limma_fit.LNCaP %>% filter(fdr <= 0.05, abs(estimate) > log2(1.3))
limma_fit.LNCaP
limma_fit.ABL <- fit_limma(expr.rma[ , 1:6], design.mat.ABL)
design.mat.ABL <- model.matrix(formula(~sensitive))
limma_fit.ABL <- fit_limma(expr.rma[ , 1:6], design.mat.ABL)
limma_fit.ABL %>% filter(fdr <= 0.05, abs(estimate) > log2(1.3))
limma_fit.ABL
library(hash)
install.packages("hash")
options(repos='http://cran.rstudio.com/')
install.packages("hash")
library(hash)
#=========================================================#
# install.packages("jqr")
# library(jqr)
Annot <- data.frame(
PROBEID = keys(hgu133plus2),
# REFSEQ = sapply(contents(hgu133plus2REFSEQ), paste, collapse=", "),
# SYMBOL = sapply(contents(hgu133plus2SYMBOL), paste, collapse=", "),
# DESC = sapply(contents(hgu133plus2GENENAME), paste, collapse=", "),
stringsAsFactors = FALSE)
#=========================================================#
# install.packages("jqr")
# library(jqr)
Annot <- data.frame(
PROBEID = keys(hgu133plus2),
# REFSEQ = sapply(contents(hgu133plus2REFSEQ), paste, collapse=", "),
# SYMBOL = sapply(contents(hgu133plus2SYMBOL), paste, collapse=", "),
# DESC = sapply(contents(hgu133plus2GENENAME), paste, collapse=", "),
stringsAsFactors = FALSE)
library(hash)
#=========================================================#
# install.packages("jqr")
# library(jqr)
Annot <- data.frame(
PROBEID = keys(hgu133plus2),
# REFSEQ = sapply(contents(hgu133plus2REFSEQ), paste, collapse=", "),
# SYMBOL = sapply(contents(hgu133plus2SYMBOL), paste, collapse=", "),
# DESC = sapply(contents(hgu133plus2GENENAME), paste, collapse=", "),
stringsAsFactors = FALSE)
library(jqr)
#=========================================================#
# install.packages("jqr")
# library(jqr)
Annot <- data.frame(
PROBEID = keys(hgu133plus2),
# REFSEQ = sapply(contents(hgu133plus2REFSEQ), paste, collapse=", "),
# SYMBOL = sapply(contents(hgu133plus2SYMBOL), paste, collapse=", "),
# DESC = sapply(contents(hgu133plus2GENENAME), paste, collapse=", "),
stringsAsFactors = FALSE)
hgu133plus2::keys
library(epivizrData)
install.packages("library(epivizrData)")
install.packages("epivizrData")
BiocManager::install("epivizrData", version = "3.9")
BiocManager::install("epivizrData")
library(epivizrData)
#=========================================================#
# install.packages("jqr")
# library(jqr)
Annot <- data.frame(
PROBEID = keys(hgu133plus2),
# REFSEQ = sapply(contents(hgu133plus2REFSEQ), paste, collapse=", "),
# SYMBOL = sapply(contents(hgu133plus2SYMBOL), paste, collapse=", "),
# DESC = sapply(contents(hgu133plus2GENENAME), paste, collapse=", "),
stringsAsFactors = FALSE)
library(affy)
library(affyPLM)
library(limma)
library(sva)
library(ggplot2)
library(dplyr)
library(biobroom)
library(class)
library(e1071)
celFiles <- list.celfiles(path = "data", full.names=TRUE)
data.rma <- rma(data.affy)
expr.rma <- exprs(data.rma)
celFiles <- list.celfiles(path = "data", full.names=TRUE)
data.affy <- ReadAffy(filenames = celFiles)
data.affy <- ReadAffy(filenames = celFiles)
data.rma <- rma(data.affy)
expr.rma <- exprs(data.rma)
#=========================================================#
fit_limma <- function (expr.rma, design.mat){
limma_fit <- lmFit(expr.rma, design.mat) %>%
eBayes() %>%
tidy() %>%
mutate(fdr = p.adjust(p.value, method = "fdr")) %>%
arrange(p.value)
return(limma_fit)
}
Annot <- data.frame(
PROBEID = keys(hgu133plus2),
# REFSEQ = sapply(contents(hgu133plus2REFSEQ), paste, collapse=", "),
# SYMBOL = sapply(contents(hgu133plus2SYMBOL), paste, collapse=", "),
# DESC = sapply(contents(hgu133plus2GENENAME), paste, collapse=", "),
stringsAsFactors = FALSE)
#=========================================================#
# install.packages("jqr")
# library(jqr)
library(epivizrData)
Annot <- data.frame(
PROBEID = keys(hgu133plus2),
# REFSEQ = sapply(contents(hgu133plus2REFSEQ), paste, collapse=", "),
# SYMBOL = sapply(contents(hgu133plus2SYMBOL), paste, collapse=", "),
# DESC = sapply(contents(hgu133plus2GENENAME), paste, collapse=", "),
stringsAsFactors = FALSE)
?mappedkeys
mappedkeys(hgu133plus2)
mappedRkeys(hgu133plus2)
keyname(hgu133plus2)
hgu133plus2
names(hgu133plus2)
class(hgu133plus2)
contents(hgu133plus2REFSEQ)
head(contents(hgu133plus2REFSEQ))
head(contents(hgu133plus2PMID2PROBE))
library(affy)
library(affyPLM)
library(limma)
library(hgu133plus2.db)
library(sva)
library(ggplot2)
library(dplyr)
library(biobroom)
library(class)
library(e1071)
celFiles <- list.celfiles(path = "data", full.names=TRUE)
data.affy <- ReadAffy(filenames = celFiles)
data.rma <- rma(data.affy)
expr.rma <- exprs(data.rma)
contents(hgu133plus2SYMBOL)
head(contents(hgu133plus2SYMBOL))
test <- testBioCConnection(contents(hgu133plus2SYMBOL))
test <- BioCConnection(contents(hgu133plus2SYMBOL))
test <- (contents(hgu133plus2SYMBOL))
View(test)
test[[1]]
test[[2]]
#=========================================================#
Annot <- data.frame(
# PROBEID = keys(hgu133plus2),
REFSEQ = sapply(contents(hgu133plus2REFSEQ), paste, collapse=", "),
SYMBOL = sapply(contents(hgu133plus2SYMBOL), paste, collapse=", "),
DESC = sapply(contents(hgu133plus2GENENAME), paste, collapse=", "),
stringsAsFactors = FALSE)
View(Annot)
head(rownames(Annot))
#=========================================================#
head(expr.rma)
sensitive <- c(0, 1, 0, 1 , 0, 1) # assign control and trt groups
design.mat.LNCaP <- model.matrix(formula(~sensitive))
design.mat.LNCaP
limma_fit.LNCaP <- fit_limma(expr.rma[ , 7:12], design.mat.LNCaP)
#=========================================================#
fit_limma <- function (expr.rma, design.mat){
limma_fit <- lmFit(expr.rma, design.mat) %>%
eBayes() %>%
tidy() %>%
mutate(fdr = p.adjust(p.value, method = "fdr")) %>%
arrange(p.value)
return(limma_fit)
}
limma_fit.LNCaP <- fit_limma(expr.rma[ , 7:12], design.mat.LNCaP)
View(limma_fit.LNCaP)
Annot$gene <- rownames(Annot)
View(Annot)
Annot$PROBEID <- rownames(Annot)
inner_join(limma_fit.LNCaP, Annot, by = c("gene" = "PROBEID"))
test <- inner_join(limma_fit.LNCaP, Annot, by = c("gene" = "PROBEID"))
test
View(test)
#=========================================================#
fit_limma <- function (expr.rma, design.mat){
limma_fit <- lmFit(expr.rma, design.mat) %>%
eBayes() %>%
# tidy() %>%
mutate(fdr = p.adjust(p.value, method = "fdr")) %>%
arrange(p.value)
return(limma_fit)
}
sensitive <- c(0, 1, 0, 1 , 0, 1) # assign control and trt groups
design.mat.LNCaP <- model.matrix(formula(~sensitive))
design.mat.LNCaP
limma_fit.LNCaP <- fit_limma(expr.rma[ , 7:12], design.mat.LNCaP)
#=========================================================#
fit_limma <- function (expr.rma, design.mat){
limma_fit <- lmFit(expr.rma, design.mat) %>%
eBayes() %>%
tidy() %>%
mutate(fdr = p.adjust(p.value, method = "fdr")) %>%
arrange(p.value)
return(limma_fit)
}
limma_fit.LNCaP <- fit_limma(expr.rma[ , 7:12], design.mat.LNCaP)
colnames(expr.rma)
install.packages('stats')
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
