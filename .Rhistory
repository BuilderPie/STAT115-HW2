n_primary = sum(index_primary);
index_normal <- grepl("N.P", colnames(taylor))
index_primary <- grepl("P.P", colnames(taylor))
index_met <- grepl("M.P", colnames(taylor))
n_normal <- sum(index_normal);
n_primary = sum(index_primary);
n_met = sum(index_met);
# class label (design vector)
taylor_classes = c(rep(0,n_normal), rep(1,n_primary), rep(2,n_met));
# train (known type samples), and test (unknown type samples)
train <- taylor[,1:174];
test <- taylor[,175:179];
taylor_classes
tumortype_all <- factor(c(taylor_classes, rep(3, 5)), levels = 0:3,
labels = c("Normal", "Primary", "Metastasized",
"Unknown"))
tumortype_class <- factor(taylor_classes, levels = 0:2,
labels = c("Normal", "Primary",
"Metastasized"))
train_samps <- 1:174
test_samps <- 175:179
tumortype_all
c(taylor_classes, rep(3, 5))
train
taylor_classes
# your code here
sensitive <- taylor_classes # assign control and trt groups
design.mat.taylor.train <- model.matrix(formula(~sensitive))
limma_fit.taylor.train <- fit_limma(train, design.mat.taylor.train)
install.packages("broom")
library(broom)
limma_fit.taylor.train <- fit_limma(train, design.mat.taylor.train)
design.mat.taylor.train <- model.matrix(formula(~sensitive))
design.mat.taylor.train
limma_fit.taylor.train <- fit_limma(train, design.mat.taylor.train)
library(affy)
library(affyPLM)
library(affyPLM)
library(limma)
library(hgu133plus2.db)
library(sva)
library(ggplot2)
library(dplyr)
library(biobroom)
library(class)
library(e1071)
library(xlsx)
library(fdrtool)
library(affxparser)
# your code here
# knitr::opts_chunk$set(echo = TRUE, fig.align = "center")  #to setup for figure alignment
# print(dir("./data"))
#=========================================================#
fit_limma <- function (expr.rma, design.mat){
limma_fit <- lmFit(expr.rma, design.mat) %>%
eBayes() %>%
tidy() %>%
mutate(fdr = p.adjust(p.value, method = "fdr")) %>%
# mutate(fdr = fdrtool(p.value, statistic = "normal")$pval) %>%
arrange(p.value)
return(limma_fit)
}
#=========================================================#
Annot <- data.frame(
# PROBEID = keys(hgu133plus2),
REFSEQ = sapply(contents(hgu133plus2REFSEQ), paste, collapse=", "),
SYMBOL = sapply(contents(hgu133plus2SYMBOL), paste, collapse=", "),
DESC = sapply(contents(hgu133plus2GENENAME), paste, collapse=", "),
stringsAsFactors = FALSE)
Annot$PROBEID <- rownames(Annot)
taylor <- as.matrix(read.csv("data/taylor2010_data.txt", sep="\t",row.names=1))
taylor <- as.matrix(read.csv("data/taylor2010_data.txt", sep="\t",row.names=1))
index_normal <- grepl("N.P", colnames(taylor))
index_primary <- grepl("P.P", colnames(taylor))
index_met <- grepl("M.P", colnames(taylor))
n_normal <- sum(index_normal);
n_primary = sum(index_primary);
n_met = sum(index_met);
# class label (design vector)
taylor_classes = c(rep(0,n_normal), rep(1,n_primary), rep(2,n_met));
# train (known type samples), and test (unknown type samples)
train <- taylor[,1:174];
test <- taylor[,175:179];
tumortype_all <- factor(c(taylor_classes, rep(3, 5)), levels = 0:3,
labels = c("Normal", "Primary", "Metastasized",
"Unknown"))
tumortype_class <- factor(taylor_classes, levels = 0:2,
labels = c("Normal", "Primary",
"Metastasized"))
train_samps <- 1:174
test_samps <- 175:179
# your code here
sensitive <- taylor_classes # assign control and trt groups
design.mat.taylor.train <- model.matrix(formula(~sensitive))
limma_fit.taylor.train <- fit_limma(train, design.mat.taylor.train)
limma_fit.taylor.train <- filter(limma_fit.taylor.train, fdr < 0.05, abs(estimate) > log2(1.3))
limma_fit.taylor.train
dim(taylor)
print(paste("The number of differentially expressed genes is: ", dim(limma_fit.taylor.train)[1], sep = ""))
# your code here
print("K-means, centers = 3, nstart = 10, #2")
taylor.train.km1 <- kmeans(t(limma_fit.taylor.train), centers = 3, nstart = 10)
View(limma_fit.taylor.train)
which(is.na(taylor.train.km1))
which(is.na(limma_fit.taylor.train))
taylor.train.km1 <- kmeans(t(limma_fit.taylor.train), centers = 3, nstart = 10)
taylor.train.km1 <- kmeans((limma_fit.taylor.train), centers = 3, nstart = 10)
which(is.na(limma_fit.taylor.train$gene))
which(is.na(limma_fit.taylor.train$[,]))
which(is.na(limma_fit.taylor.train[,]))
which(is.na(limma_fit.taylor.train$p.value))
which(is.na(limma_fit.taylor.train$estimate))
which(is.na(limma_fit.taylor.train$gene))
# your code here
genelist <- limma_fit.taylor.train %>%
distinct(gene)
taylor_subset <- limma_fit.taylor.train[genelist$gene, ]
print("K-means, centers = 3, nstart = 10, #2")
taylor.train.km1 <- kmeans(t(taylor_subset), centers = 3, nstart = 10)
taylor_subset
genelist
limma_fit.taylor.train[genelist$gene, ]
limma_fit.taylor.train
# your code here
genelist <- limma_fit.taylor.train %>%
distinct(gene)
# your code here
genelist <- limma_fit.taylor.train %>%
distinct(gene)
distinct(limma_fit.taylor.train, gene)
genelist
# your code here
genelist <- limma_fit.taylor.train %>%
distinct(gene)
genelist
limma_fit.taylor.train[genelist$gene, ]
limma_fit.taylor.train[1:10, ]
celFiles <- list.celfiles(path = "data", full.names=TRUE)
data.affy <- ReadAffy(filenames = celFiles)
data.affy <- ReadAffy(filenames = celFiles)
data.rma <- rma(data.affy)
expr.rma <- exprs(data.rma)
# your code here
# knitr::opts_chunk$set(echo = TRUE, fig.align = "center")  #to setup for figure alignment
# print(dir("./data"))
#=========================================================#
fit_limma <- function (expr.rma, design.mat){
limma_fit <- lmFit(expr.rma, design.mat) %>%
eBayes() %>%
tidy() %>%
mutate(fdr = p.adjust(p.value, method = "fdr")) %>%
# mutate(fdr = fdrtool(p.value, statistic = "normal")$pval) %>%
arrange(p.value)
return(limma_fit)
}
#=========================================================#
Annot <- data.frame(
# PROBEID = keys(hgu133plus2),
REFSEQ = sapply(contents(hgu133plus2REFSEQ), paste, collapse=", "),
SYMBOL = sapply(contents(hgu133plus2SYMBOL), paste, collapse=", "),
DESC = sapply(contents(hgu133plus2GENENAME), paste, collapse=", "),
stringsAsFactors = FALSE)
Annot$PROBEID <- rownames(Annot)
#=========================================================#
head(expr.rma)
#=========================================================#
sensitive <- c(0, 1, 0, 1 , 0, 1) # assign control and trt groups
design.mat.ABL <- model.matrix(formula(~sensitive))
limma_fit.ABL <- fit_limma(expr.rma[ , 1:6], design.mat.ABL)
# limma_fit.ABL %>% filter(fdr < 0.05, abs(estimate) > log2(1.3))
test <- filter(limma_fit.ABL, fdr < 0.05, abs(estimate) > log2(1.3))
print(paste("Number of Significant genes in ABL Group: ", dim(test)[1], sep = ""))
#=========================================================#
sensitive <- c(0, 1, 0, 1 , 0, 1) # assign control and trt groups
design.mat.LNCaP <- model.matrix(formula(~sensitive))
# design.mat.LNCaP
limma_fit.LNCaP <- fit_limma(expr.rma[ , 7:12], design.mat.LNCaP)
# sensitive <- c(0, 1, 0, 1 , 0, 1, 2, 3, 2, 3 , 2, 3) # assign
design.mat <- model.matrix(formula(~sensitive))
# expr.rma.combat <- ComBat(dat = expr.rma, batch = c(0,1,0,1,0,1,2,3,2,3,2,3), mod = design.mat)
# expr.rma.combat <- ComBat(dat = expr.rma, c(1,1,2,2,2,2,1,1,2,3,2,2), mod = design.mat)
expr.rma.combat <- ComBat(dat = expr.rma, c(1,1,2,2,2,2,3,3,4,5,4,4), mod = design.mat)
clustering_combat <- expr.rma.combat %>%
t() %>%
dist() %>%
hclust(method = "complete")
sensitive <- c(0, 1, 0, 1 , 0, 1) # assign control and trt groups
design.mat.ABL <- model.matrix(formula(~sensitive))
limma_fit.ABL <- fit_limma(expr.rma[ , 1:6], design.mat.ABL)
# limma_fit.ABL %>% filter(fdr < 0.05, abs(estimate) > log2(1.3))
test <- filter(limma_fit.ABL, fdr < 0.05, abs(estimate) > log2(1.3))
print(paste("Number of Significant genes in ABL Group: ", dim(test)[1], sep = ""))
#=========================================================#
sensitive <- c(0, 1, 0, 1 , 0, 1) # assign control and trt groups
design.mat.LNCaP <- model.matrix(formula(~sensitive))
# design.mat.LNCaP
limma_fit.LNCaP <- fit_limma(expr.rma[ , 7:12], design.mat.LNCaP)
head(limma_fit.LNCaP)
# limma_fit.LNCaP %>% filter(fdr < 0.05, abs(estimate) > log2(1.3))
# limma_fit.LNCaP %>% filter(p.value < 0.05, abs(estimate) > log2(1.3))
test <- filter(limma_fit.LNCaP, fdr < 0.05, abs(estimate) > log2(1.3))
print(paste("Number of Significant genes in LNCaP Group: ", dim(test)[1], sep = ""))
# test <- inner_join(limma_fit.LNCaP, Annot, by = c("gene" = "PROBEID"))
print("Notes: I tried the p.adjust method in STATS package and  the fdrtool method in FDRTOOL package. However both of them converted p-value to non-significant levels.This is prob
# your code here
clustering <- expr.rma %>%
t() %>%
dist() %>%
hclust(method = "complete")
knitr::opts_chunk$set(fig.width=12, fig.height=8)
plot(clustering, main = "Hierarchical Clustering of the 12 Samples")
dates <- rep(0, 12)
# your code here
clustering <- expr.rma %>%
t() %>%
dist() %>%
hclust(method = "complete")
knitr::opts_chunk$set(fig.width=12, fig.height=8)
plot(clustering, main = "Hierarchical Clustering of the 12 Samples")
dates <- rep(0, 12)
for (i in 1:12){
datheader <- readCelHeader(paste("./data/",dir("./data")[i], sep=''))$datheader
# dd <- gsub(".*([0-9]{2,2}/[0-9]{2,2}/[0-9]{2,2}).*","\\1",datheader)
dd <- gsub(".*([0-9]{2,2}/[0-9]{2,2}/[0-9]{2,2} [0-9]{2,2}:[0-9]{2,2}:[0-9]{2,2}).*","\\1",datheader)
dates[i] <- paste(i, dd, sep =":")
}
print("The measuring date of 12 samples:")
print(dates)
print("The clustering suggests the presence of batch effect. If we cut the tree from the highest level, two subgroups could be found. They are of different size which are 4 and 8, respectively.  After printing out the sample date and time (shown above), we can see that GM969458, GM969459, GM969464, GM969465 in the left subtree were all sampled on 03/12/09. On the other hand, these four samples came from the control and treated replicates of ABL and LNCap cell lines, which should have larger distance to each other at the beginning of the clustering process.")
sensitive <- c(0, 1, 0, 1 , 0, 1, 0, 1, 0, 1 , 0, 1) # assign control and trt groups
# sensitive <- c(0, 1, 0, 1 , 0, 1, 2, 3, 2, 3 , 2, 3) # assign
design.mat <- model.matrix(formula(~sensitive))
# expr.rma.combat <- ComBat(dat = expr.rma, batch = c(0,1,0,1,0,1,2,3,2,3,2,3), mod = design.mat)
# expr.rma.combat <- ComBat(dat = expr.rma, c(1,1,2,2,2,2,1,1,2,3,2,2), mod = design.mat)
expr.rma.combat <- ComBat(dat = expr.rma, c(1,1,2,2,2,2,3,3,4,5,4,4), mod = design.mat)
clustering_combat <- expr.rma.combat %>%
t() %>%
dist() %>%
hclust(method = "complete")
plot(clustering_combat, main = "Hierarchical Clustering of the 12 samples after ComBat adjustment")
print("Evidence for batch effects were successfully adjusted:")
print("1. The two largest subtree have equal number of leafs which is 6.")
limma_fit.ABL.combat <- fit_limma(expr.rma.combat[ , 1:6], design.mat.ABL)
head(limma_fit.ABL.combat)
limma_fit.ABL.combat <- filter(limma_fit.ABL.combat, fdr < 0.05, abs(estimate) > log2(1.3))
print(paste("Number of Significant genes in ABL Group: ", length(list.ABL$SYMBOL), sep = ""))
head(list.ABL$SYMBOL, 50)
limma_fit.ABL.combat <- filter(limma_fit.ABL.combat, fdr < 0.05, abs(estimate) > log2(1.3))
list.ABL <- inner_join(limma_fit.ABL.combat, Annot, by = c("gene" = "PROBEID"))
print(paste("Number of Significant genes in ABL Group: ", length(list.ABL$SYMBOL), sep = ""))
print(paste("First 50 genes:"))
head(list.ABL$SYMBOL, 50)
limma_fit.LNCaP.combat <- fit_limma(expr.rma.combat[ , 7:12], design.mat.LNCaP)
head(limma_fit.LNCaP.combat)
limma_fit.LNCaP.combat <- filter(limma_fit.LNCaP.combat, fdr < 0.05, abs(estimate) > log2(1.3))
list.LNCaP <- inner_join(limma_fit.LNCaP.combat, Annot, by = c("gene" = "PROBEID"))
print(paste("Number of Significant genes in LNCaP Group: ", length(list.LNCaP$SYMBOL), sep = ""))
print(paste("First 50 genes:"))
head(list.LNCaP$SYMBOL, 50)
# your code here
limma_fit.ALL.combat <- fit_limma(expr.rma.combat, design.mat)
expr.rma.combat
# your code here
sensitive <- taylor_classes # assign control and trt groups
design.mat.taylor.train <- model.matrix(formula(~sensitive))
limma_fit.taylor.train <- fit_limma(train, design.mat.taylor.train)
limma_fit.taylor.train <- filter(limma_fit.taylor.train, fdr < 0.05, abs(estimate) > log2(1.3))
train
# your code here
genelist <- limma_fit.taylor.train %>%
distinct(gene)
expr_subset.taylor <- train[genelist$gene, ]
print("K-means, centers = 3, nstart = 10, #2")
taylor.train.km1 <- kmeans(t(expr_subset.taylor), centers = 3, nstart = 10)
data.frame(type = tumortype_all,
cluster = taylor.train.km1$cluster) %>%
table()
tumortype_all
data.frame(type = tumortype_all[1:174],
cluster = taylor.train.km1$cluster) %>%
table()
tumortype_all[1:174]
tumortype_class
data.frame(type = tumortype_class,
cluster = taylor.train.km1$cluster) %>%
table()
print("K-means, centers = 3, nstart = 10, #2")
taylor.train.km1 <- kmeans(t(expr_subset.taylor), centers = 3, nstart = 10)
data.frame(type = tumortype_class,
cluster = taylor.train.km1$cluster) %>%
table()
print("K-means, centers = 3, nstart = 100, #1")
taylor.train.km1 <- kmeans(t(expr_subset.taylor), centers = 3, nstart = 100)
taylor.train.km1 <- kmeans(t(expr_subset.taylor), centers = 3, nstart = 100)
data.frame(type = tumortype_class,
cluster = taylor.train.km1$cluster) %>%
table()
print("K-means, centers = 3, nstart = 100, #2")
taylor.train.km1 <- kmeans(t(expr_subset.taylor), centers = 3, nstart = 100)
taylor.train.km1 <- kmeans(t(expr_subset.taylor), centers = 3, nstart = 100)
data.frame(type = tumortype_class,
cluster = taylor.train.km1$cluster) %>%
table()
expr_subset.taylor
colnames(expr_subset.taylor)
grepl(colnames(expr_subset.taylor),"PCA")
grepl("PCA", colnames(expr_subset.taylor))
taylor
# your code here
library(ggfortify)
# your code here
install.packages("library(ggfortify)")
options(repos = c(CRAN = "http://cran.rstudio.com"))
install.packages("library(ggfortify)")
# your code here
install.packages("ggfortify")
library(ggfortify)
expr_subset.taylor
pca_result <- expr_subset.taylor %>% t() %>% prcomp(center = TRUE, scale. = TRUE)
edata_pc_df <- as.data.frame(pca_result$x)
autoplot(edata_pc_df)
autoplot(pca_result)
pca_result$rotation
tumortype_class
# autoplot(pca_result)
edata_pc_df <- as.data.frame(pca_result$x)
edata_pc_df <-  edata_pc_df %>%
mutate(batch = as.factor(tumortype_class),
hasCancer = as.factor(tumortype_class))
edata_pc_df[1:5, 1:5]
ggplot(edata_pc_df, aes(x = PC1, y = PC2, color = batch)) +
geom_point()
ggplot(edata_pc_df, aes(x = PC1, y = PC2, color = hasCancer)) +
geom_point()
ggplot(edata_pc_df, aes(x = PC1, y = PC2, color = hasCancer)) +
geom_point()
ggplot(edata_pc_df, aes(x = PC1, y = PC2, color = batch)) +
geom_point()
ggplot(edata_pc_df, aes(x = PC1, y = PC2, color = hasCancer)) +
geom_point()
dim(expr_subset.taylor)
pca_result <- taylor[genelist$gene, ] %>% t() %>% prcomp(center = TRUE, scale. = TRUE)
# autoplot(pca_result)
edata_pc_df <- as.data.frame(pca_result$x)
edata_pc_df <-  edata_pc_df %>%
mutate(batch = as.factor(tumortype_all),
hasCancer = as.factor(tumortype_all))
edata_pc_df[1:5, 1:5]
ggplot(edata_pc_df, aes(x = PC1, y = PC2, color = batch)) +
geom_point()
ggplot(edata_pc_df, aes(x = PC1, y = PC2, color = batch)) +
geom_point() +
ggtitle("PCA Biplot of All Samples")
# your code here
eigenvals <- (pca_result$sdev)^2
n_eigenvals <- length(eigenvals)
n_eigenvals
var_explained <- cumsum(eigenvals) / sum(eigenvals)
cumsum(eigenvals)
sum(eigenvals)
eigenvals
var_explained <- cumsum(eigenvals) / sum(eigenvals)
data.frame(index = 1:n_eigenvals,
var_explained = var_explained) %>%
ggplot(aes(x = index, y = var_explained)) + geom_line() +
xlab("Eigenvalue Index") + ylab("Cum. variance explained") +
ggtitle("PCA Variance Explained")
which(var_explained > 0.8)
min(which(var_explained > 0.8))
ggplot(edata_pc_df, aes(x = PC1, y = PC2, color = batch)) +
geom_point() +
ggtitle("PCA Biplot of All Samples.") +
labs(x = paste(var_explained[1], "% of variance explained", sep = ""))
ggplot(edata_pc_df, aes(x = PC1, y = PC2, color = batch)) +
geom_point() +
ggtitle("PCA Biplot of All Samples.") +
labs(x = paste(sprintf("%.1f", var_explained[1]), "% of variance explained", sep = ""))
ggplot(edata_pc_df, aes(x = PC1, y = PC2, color = batch)) +
geom_point() +
ggtitle("PCA Biplot of All Samples.") +
labs(x = paste(sprintf("%0.1f", var_explained[1]), "% of variance explained", sep = ""))
sprintf("%0.1f", var_explained[1])
var_explained[1]
ggplot(edata_pc_df, aes(x = PC1, y = PC2, color = batch)) +
geom_point() +
ggtitle("PCA Biplot of All Samples.") +
labs(x = paste(sprintf("%0.1f", var_explained[1]*100), "% of variance explained", sep = ""))
ggplot(edata_pc_df, aes(x = PC1, y = PC2, color = batch)) +
geom_point() +
ggtitle("PCA Biplot of All Samples.") +
labs(x = paste(sprintf("%0.1f", var_explained[1]*100), "% of variance explained", sep = ""),
y = paste(sprintf("%0.1f", (var_explained[2] - var_explained[1])*100), "% of variance explained", sep = ""))
data.frame(index = 1:n_eigenvals,
var_explained = var_explained) %>%
ggplot(aes(x = index, y = var_explained)) + geom_line() +
xlab("Eigenvalue Index") + ylab("Cum. variance explained") +
ggtitle("PCA Variance Explained")
which(var_explained > 0.8)
min(which(var_explained > 0.8))
# which(var_explained > 0.8)
paste("The minimum # of PCs needed to capture 80% of the variance is: ", min(which(var_explained > 0.8)))
# your code here
pca_result.ALL <- taylor %>% t() %>% prcomp(center = TRUE, scale. = TRUE)
edata_pc_df.All <- as.data.frame(pca_result.All$x)
# your code here
pca_result.All <- taylor %>% t() %>% prcomp(center = TRUE, scale. = TRUE)
# your code here
pca_result.All <- taylor %>% t() %>% prcomp(center = TRUE, scale. = TRUE)
edata_pc_df.All <- as.data.frame(pca_result.All$x)
edata_pc_df.All <-  edata_pc_df.All %>%
mutate(batch = as.factor(tumortype_all),
hasCancer = as.factor(tumortype_all))
edata_pc_df.All[1:5, 1:5]
eigenvals.All <- (pca_result.All$sdev)^2
n_eigenvals.All <- length(eigenvals.All)
var_explained.All <- cumsum(eigenvals.All) / sum(eigenvals.All)
eigenvals.All <- (pca_result.All$sdev)^2
n_eigenvals.All <- length(eigenvals.All)
var_explained.All <- cumsum(eigenvals.All) / sum(eigenvals.All)
ggplot(edata_pc_df.All, aes(x = PC1, y = PC2, color = batch)) +
geom_point() +
ggtitle("PCA Biplot of All Samples.") +
ggtitle("PCA Biplot of All Samples.") +
labs(x = paste(sprintf("%0.1f", var_explained.All[1]*100), "% of variance explained", sep = ""),
y = paste(sprintf("%0.1f", (var_explained.All[2] - var_explained.All[1])*100), "% of variance explained", sep = ""))
#For DE group
set.seed(1234)
train_ind <- sample(1:ncol(taylor[genelist$gene, ]), size = 20, replace = FALSE)
expr_train <- taylor[genelist$gene, train_ind]
expr_test <- taylor[genelist$gene, -train_ind]
test_samps
train_samps
train_ind <- train_samps
expr_train <- taylor[genelist$gene, train_ind]
expr_test <- taylor[genelist$gene, -train_ind]
type_train <- tumortype_all[train_ind]
type_test <- tumortype_all[-train_ind]
type_test
type_knn <- knn(t(expr_train), t(expr_test), type_train, k = 3)
confusionMatrix(type_knn, type_test)$table
# your code here
BiocManager::install("caret ")
# your code here
BiocManager::install("caret")
# your code here
# BiocManager::install("caret")
library(caret)
confusionMatrix(type_knn, type_test)$table
type_knn
type_knn <- knn(t(expr_train), t(expr_test), type_train, k = 1)
confusionMatrix(type_knn, type_test)$table
type_knn <- knn(t(expr_train), t(expr_test), type_train, k = 3)
type_knn <- knn(t(expr_train), t(expr_test), type_train, k = 5)
confusionMatrix(type_knn, type_test)$table
train_ind <- train_samps
expr_train <- taylor[, train_ind]
expr_test <- taylor[, -train_ind]
type_train <- tumortype_all[train_ind]
type_test <- tumortype_all[-train_ind]
type_knn <- knn(t(expr_train), t(expr_test), type_train, k = 1)
confusionMatrix(type_knn, type_test)$table
type_knn <- knn(t(expr_train), t(expr_test), type_train, k = 3)
confusionMatrix(type_knn, type_test)$table
type_knn <- knn(t(expr_train), t(expr_test), type_train, k = 5)
confusionMatrix(type_knn, type_test)$table
tumortype_class
# type_test <- tumortype_all[-train_ind]
type_test <- factor(c(rep(3, 5)), levels = 3,
labels = c("Unknown"))
type_test
type_knn <- knn(t(expr_train), t(expr_test), type_train, k = 1)
confusionMatrix(type_knn, type_test)$table
# type_test <- tumortype_all[-train_ind]
type_test <- factor(c(rep(3, 5)), labels = c("Unknown"))
type_knn <- knn(t(expr_train), t(expr_test), type_train, k = 1)
confusionMatrix(type_knn, type_test)$table
train_ind <- train_samps
expr_train <- taylor[genelist$gene, train_ind]
type_train <- tumortype_class
type_knn <- knn(t(expr_train), t(expr_test), type_train, k = 1)
confusionMatrix(type_knn, type_test)$table
confusionMatrix(type_knn, type_test)$table
print("For DE group")
train_ind <- train_samps
expr_train <- taylor[genelist$gene, train_ind]
type_train <- tumortype_all[train_ind]
type_test <- tumortype_all[-train_ind]
type_knn <- knn(t(expr_train), t(expr_test), type_train, k = 1)
confusionMatrix(type_knn, type_test)$table
type_knn <- knn(t(expr_train), t(expr_test), type_train, k = 1)
train_ind <- train_samps
expr_train <- taylor[genelist$gene, train_ind]
expr_test <- taylor[genelist$gene, -train_ind]
type_train <- tumortype_all[train_ind]
type_test <- tumortype_all[-train_ind]
type_knn <- knn(t(expr_train), t(expr_test), type_train, k = 1)
confusionMatrix(type_knn, type_test)$table
type_knn <- knn(t(expr_train), t(expr_test), type_train, k = 3)
confusionMatrix(type_knn, type_test)$table
type_knn <- knn(t(expr_train), t(expr_test), type_train, k = 5)
confusionMatrix(type_knn, type_test)$table
print("For all genens")
train_ind <- train_samps
expr_train <- taylor[, train_ind]
expr_test <- taylor[, -train_ind]
type_train <- tumortype_all[train_ind]
type_test <- tumortype_all[-train_ind]
type_knn <- knn(t(expr_train), t(expr_test), type_train, k = 1)
type_knn <- knn(t(expr_train), t(expr_test), type_train, k = 3)
type_knn <- knn(t(expr_train), t(expr_test), type_train, k = 3)
confusionMatrix(type_knn, type_test)$table
confusionMatrix(type_knn, type_test)$table
